---
layout: post
title:      "Node Challenge Too Great:  My attempt to learn Node.js in 24 hours"
date:       2017-11-28 00:20:30 +0000
permalink:  node_challenge_too_great_my_attempt_to_learn_node_js_in_24_hours
---


Recently, a friend and career mentor of mine contacted me because he needed to find someone who knew Node.js for a very short-turnaround project.  He is a data scientist by trade, and does some part-time contract work on the side, but his employers in that venture had asked him to dive into the web dev side of the social media analysis app he was building.  Having not done web dev work for years, and never having used Node.js, on which the app was built, he needed to quickly find a Node.js developer able and willing to do part-time, non-permanent contract work in Washington, D.C.: a task that is much easier said than done.  So he asked me if I knew anything about Node.js, and, if not, I would be willing to learn.

Expressing interest, while feeling the need to manage his expectations, I told him that I had some mild experience using JavaScript for simple tasks, but did not know Node.js.  Nonetheless,  he offered me $50 an hour part-time work if I could learn enough Node.js over the next forty-eight hours to help him fix the problem his app was having.  He seemed confident that there was a pretty good chance I would be able to figure things out, despite my dubious credentials.  He said that at the very least, he was sure I knew more about Node.js than he did, and that I would be one of the few people available to work on a sporadic hourly basis on such short notice.

So began my earnest attempt learn as much Node JS as possible over a period of twenty-four hours.  I agreed that I would spend a day studying and researching, and then spend another day familiarizing myself with the app with which he needed assistance. By then, I would let him know if I would be able to be of use to him.  In the meantime I would also put out feelers in my own networks to see I could find anyone more qualified than me who would be available under the circumstances.  

The first twenty-four hours involved me skipping ahead in my Flatiron School Learn.co curriculum and re-learning as much Javascript as possible.  I had some experience working with it in other programming classes I had taken before, but was definitely in need of a refresher.  Thoroughly reviewing JavaScript and watching some Node.js how-to videos to supplement them was my best bet for coming proficient quickly enough.

The more I learned, the more evident to me it became that there were many similarities between Node.js and Rails.  In particular, I found a great deal of conceptual overlap when it came to response-handling and html-rendering.  It appears that, mercifully, despite the languages and frameworks being considerably different, I was comfortable enough with these general concepts to understand what was going on and even replicate it for my own purposes.

After that first twenty-four-hour period, I decided that it was time to start looking at the app itself.  This is where the real difficulties began.  It turns out that my biggest challenge was not understanding Node.js, but understanding how all of the pieces in this massive data-science app fit together.  The app used Twitter's API for social-media analysis.  My task was to figure out how to filter the tweet data by keyword, rather than having the app's infographics display literally all of the tweets(!).  Figuring that out was just a matter of reading the Twitter API documentation and learning which functions and inputs to alter, which was relatively simple.  However, despite feeling quite certain that I had figured out how to produce the required results, it appeared that there was something somewhere that I did not quite understand; despite making changes in what were clearly parts of the code pertaining to filtering the tweet stream, the app's actual behavior would not change.  Perhaps there was some layer of interaction between the visual components of the app and its business logic that I was missing.  Maybe I would have been able to figure it out eventually, but I had run out of time.

Luckily I had had some luck finding a well-qualified replacement.  While attending a weekly Code and Coffee meetup that I had organized in Annapolis, one of the first-time attendees was by chance a programmer specializing in Node.js.  Even better, he was able and willing to take on part-time work on very short notice.  I had put him in touch with my friend soon after I began combing through the app itself, so luckily they were able to work out an agreement and start making progress ahead of their deadline, which made me feel better about my failure to produce results, and lifted a considerable weight off of my conscience.  

Despite not being able to take advantage of the lucrative part-time opportunity which had been presented to me, the experience was quite valuable for other reasons.  I gained experience looking through and quickly familiarizing myself with an unfamiliar code base, which almost certainly will be the first thing I do whenever I am starting a new job.  Perhaps even more importanly, this whole experience reinforced the lesson that no matter what field you are in, whether it is one involving people or computers, networking (of the human variety) is always important.  Had I not started the Code and Coffee meetup months before, and had I not gone to this particular one and talked loudly about how I was struggling to learn Node.js on a tight deadline, I would not have met this lifesaving Node.js expert, and when it became clear that I had hit an impassable snag, my friend who sought to employ me would have been out of options.  No matter what you do for a living, you should never take people out of the equation.
